
//! Autogenerated weights for `pallet_confidential_docs`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-05, STEPS: `100`, REPEAT: `200`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sebastian-XPS-13-9310`, CPU: `11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/hashed-parachain
// benchmark
// pallet
// --wasm-execution=compiled
// --chain
// dev
// --pallet
// pallet_confidential_docs
// --extrinsic
// *
// --steps
// 100
// --repeat
// 200
// --output
// ../hashed-pallets/pallets/confidential-docs/src/weights.rs
// --template
// /home/sebastian/vsc-workspace/polkadot-sdk/substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_confidential_docs`.
pub trait WeightInfo {
	fn set_vault(c: u32, ) -> Weight;
	fn set_owned_document(c: u32, n: u32, d: u32, o: u32, ) -> Weight;
	fn remove_owned_document(c: u32, n: u32, d: u32, o: u32, ) -> Weight;
	fn share_document(c: u32, n: u32, d: u32, s: u32, ) -> Weight;
	fn update_shared_document_metadata(c: u32, n: u32, d: u32, ) -> Weight;
	fn remove_shared_document(c: u32, n: u32, d: u32, s: u32, ) -> Weight;
	fn create_group(c: u32, n: u32, ) -> Weight;
	fn add_group_member(c: u32, n: u32, s: u32, ) -> Weight;
	fn remove_group_member(c: u32, n: u32, s: u32, ) -> Weight;
}

/// Weights for `pallet_confidential_docs` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ConfidentialDocs::UserIds` (r:1 w:1)
	/// Proof: `ConfidentialDocs::UserIds` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::Vaults` (r:1 w:1)
	/// Proof: `ConfidentialDocs::Vaults` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::PublicKeys` (r:0 w:1)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	fn set_vault(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3631`
		// Minimum execution time: 26_101_000 picoseconds.
		Weight::from_parts(27_906_004, 3631)
			// Standard Error: 1_103
			.saturating_add(Weight::from_parts(1_117, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `ConfidentialDocs::PublicKeys` (r:1 w:0)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::OwnedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::OwnedDocs` (`max_values`: None, `max_size`: Some(319), added: 2794, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::OwnedDocsByOwner` (r:1 w:1)
	/// Proof: `ConfidentialDocs::OwnedDocsByOwner` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	/// The range of component `o` is `[1, 99]`.
	fn set_owned_document(c: u32, n: u32, d: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (100 ±0) + o * (107 ±0)`
		//  Estimated: `13699`
		// Minimum execution time: 35_181_000 picoseconds.
		Weight::from_parts(21_852_919, 13699)
			// Standard Error: 768
			.saturating_add(Weight::from_parts(146_886, 0).saturating_mul(c.into()))
			// Standard Error: 1_595
			.saturating_add(Weight::from_parts(29_715, 0).saturating_mul(n.into()))
			// Standard Error: 794
			.saturating_add(Weight::from_parts(3_122, 0).saturating_mul(d.into()))
			// Standard Error: 768
			.saturating_add(Weight::from_parts(411_029, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ConfidentialDocs::OwnedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::OwnedDocs` (`max_values`: None, `max_size`: Some(319), added: 2794, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::OwnedDocsByOwner` (r:1 w:1)
	/// Proof: `ConfidentialDocs::OwnedDocsByOwner` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	/// The range of component `o` is `[1, 100]`.
	fn remove_owned_document(c: u32, _n: u32, _d: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (102 ±0) + d * (1 ±0) + n * (1 ±0) + o * (107 ±0)`
		//  Estimated: `13699`
		// Minimum execution time: 29_466_000 picoseconds.
		Weight::from_parts(21_390_475, 13699)
			// Standard Error: 613
			.saturating_add(Weight::from_parts(117_866, 0).saturating_mul(c.into()))
			// Standard Error: 613
			.saturating_add(Weight::from_parts(409_095, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ConfidentialDocs::SharedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocs` (`max_values`: None, `max_size`: Some(351), added: 2826, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::PublicKeys` (r:2 w:0)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::SharedDocsByFrom` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocsByFrom` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::SharedDocsByTo` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocsByTo` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	/// The range of component `s` is `[1, 99]`.
	fn share_document(c: u32, _n: u32, _d: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (200 ±0) + s * (209 ±0)`
		//  Estimated: `13699`
		// Minimum execution time: 46_152_000 picoseconds.
		Weight::from_parts(18_993_375, 13699)
			// Standard Error: 461
			.saturating_add(Weight::from_parts(296_951, 0).saturating_mul(c.into()))
			// Standard Error: 461
			.saturating_add(Weight::from_parts(735_827, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `ConfidentialDocs::SharedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocs` (`max_values`: None, `max_size`: Some(351), added: 2826, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	fn update_shared_document_metadata(c: u32, n: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375 + c * (1 ±0) + d * (1 ±0) + n * (1 ±0)`
		//  Estimated: `3816`
		// Minimum execution time: 24_410_000 picoseconds.
		Weight::from_parts(24_738_782, 3816)
			// Standard Error: 509
			.saturating_add(Weight::from_parts(9_090, 0).saturating_mul(c.into()))
			// Standard Error: 1_058
			.saturating_add(Weight::from_parts(3_062, 0).saturating_mul(n.into()))
			// Standard Error: 526
			.saturating_add(Weight::from_parts(3_947, 0).saturating_mul(d.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ConfidentialDocs::SharedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocs` (`max_values`: None, `max_size`: Some(351), added: 2826, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::SharedDocsByTo` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocsByTo` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::SharedDocsByFrom` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocsByFrom` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	/// The range of component `s` is `[1, 100]`.
	fn remove_shared_document(c: u32, n: u32, d: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (203 ±0) + d * (1 ±0) + n * (1 ±0) + s * (209 ±0)`
		//  Estimated: `13699`
		// Minimum execution time: 35_597_000 picoseconds.
		Weight::from_parts(7_503_363, 13699)
			// Standard Error: 631
			.saturating_add(Weight::from_parts(309_328, 0).saturating_mul(c.into()))
			// Standard Error: 1_312
			.saturating_add(Weight::from_parts(16_037, 0).saturating_mul(n.into()))
			// Standard Error: 653
			.saturating_add(Weight::from_parts(5_743, 0).saturating_mul(d.into()))
			// Standard Error: 631
			.saturating_add(Weight::from_parts(743_796, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `ConfidentialDocs::Groups` (r:1 w:1)
	/// Proof: `ConfidentialDocs::Groups` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::PublicKeys` (r:1 w:1)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::MemberGroups` (r:1 w:1)
	/// Proof: `ConfidentialDocs::MemberGroups` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::GroupMembers` (r:0 w:1)
	/// Proof: `ConfidentialDocs::GroupMembers` (`max_values`: None, `max_size`: Some(263), added: 2738, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	fn create_group(c: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304`
		//  Estimated: `6699`
		// Minimum execution time: 33_008_000 picoseconds.
		Weight::from_parts(33_993_180, 6699)
			// Standard Error: 434
			.saturating_add(Weight::from_parts(353, 0).saturating_mul(c.into()))
			// Standard Error: 902
			.saturating_add(Weight::from_parts(7_273, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `ConfidentialDocs::Groups` (r:1 w:0)
	/// Proof: `ConfidentialDocs::Groups` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::PublicKeys` (r:2 w:0)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::GroupMembers` (r:2 w:1)
	/// Proof: `ConfidentialDocs::GroupMembers` (`max_values`: None, `max_size`: Some(263), added: 2738, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::MemberGroups` (r:1 w:1)
	/// Proof: `ConfidentialDocs::MemberGroups` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `s` is `[1, 99]`.
	fn add_group_member(c: u32, n: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1077 + c * (1 ±0) + s * (18 ±0)`
		//  Estimated: `6699`
		// Minimum execution time: 46_452_000 picoseconds.
		Weight::from_parts(45_260_644, 6699)
			// Standard Error: 1_462
			.saturating_add(Weight::from_parts(71_997, 0).saturating_mul(c.into()))
			// Standard Error: 3_038
			.saturating_add(Weight::from_parts(5_531, 0).saturating_mul(n.into()))
			// Standard Error: 1_462
			.saturating_add(Weight::from_parts(228_161, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ConfidentialDocs::Groups` (r:1 w:0)
	/// Proof: `ConfidentialDocs::Groups` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::GroupMembers` (r:2 w:1)
	/// Proof: `ConfidentialDocs::GroupMembers` (`max_values`: None, `max_size`: Some(263), added: 2738, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::MemberGroups` (r:1 w:1)
	/// Proof: `ConfidentialDocs::MemberGroups` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `s` is `[1, 100]`.
	fn remove_group_member(c: u32, n: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1015 + c * (2 ±0) + s * (11 ±0)`
		//  Estimated: `6699`
		// Minimum execution time: 40_149_000 picoseconds.
		Weight::from_parts(34_798_204, 6699)
			// Standard Error: 1_693
			.saturating_add(Weight::from_parts(76_528, 0).saturating_mul(c.into()))
			// Standard Error: 3_517
			.saturating_add(Weight::from_parts(165_703, 0).saturating_mul(n.into()))
			// Standard Error: 1_692
			.saturating_add(Weight::from_parts(148_674, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ConfidentialDocs::UserIds` (r:1 w:1)
	/// Proof: `ConfidentialDocs::UserIds` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::Vaults` (r:1 w:1)
	/// Proof: `ConfidentialDocs::Vaults` (`max_values`: None, `max_size`: Some(166), added: 2641, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::PublicKeys` (r:0 w:1)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	fn set_vault(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `147`
		//  Estimated: `3631`
		// Minimum execution time: 26_101_000 picoseconds.
		Weight::from_parts(27_906_004, 3631)
			// Standard Error: 1_103
			.saturating_add(Weight::from_parts(1_117, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `ConfidentialDocs::PublicKeys` (r:1 w:0)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::OwnedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::OwnedDocs` (`max_values`: None, `max_size`: Some(319), added: 2794, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::OwnedDocsByOwner` (r:1 w:1)
	/// Proof: `ConfidentialDocs::OwnedDocsByOwner` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	/// The range of component `o` is `[1, 99]`.
	fn set_owned_document(c: u32, n: u32, d: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (100 ±0) + o * (107 ±0)`
		//  Estimated: `13699`
		// Minimum execution time: 35_181_000 picoseconds.
		Weight::from_parts(21_852_919, 13699)
			// Standard Error: 768
			.saturating_add(Weight::from_parts(146_886, 0).saturating_mul(c.into()))
			// Standard Error: 1_595
			.saturating_add(Weight::from_parts(29_715, 0).saturating_mul(n.into()))
			// Standard Error: 794
			.saturating_add(Weight::from_parts(3_122, 0).saturating_mul(d.into()))
			// Standard Error: 768
			.saturating_add(Weight::from_parts(411_029, 0).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ConfidentialDocs::OwnedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::OwnedDocs` (`max_values`: None, `max_size`: Some(319), added: 2794, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::OwnedDocsByOwner` (r:1 w:1)
	/// Proof: `ConfidentialDocs::OwnedDocsByOwner` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	/// The range of component `o` is `[1, 100]`.
	fn remove_owned_document(c: u32, _n: u32, _d: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (102 ±0) + d * (1 ±0) + n * (1 ±0) + o * (107 ±0)`
		//  Estimated: `13699`
		// Minimum execution time: 29_466_000 picoseconds.
		Weight::from_parts(21_390_475, 13699)
			// Standard Error: 613
			.saturating_add(Weight::from_parts(117_866, 0).saturating_mul(c.into()))
			// Standard Error: 613
			.saturating_add(Weight::from_parts(409_095, 0).saturating_mul(o.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ConfidentialDocs::SharedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocs` (`max_values`: None, `max_size`: Some(351), added: 2826, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::PublicKeys` (r:2 w:0)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::SharedDocsByFrom` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocsByFrom` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::SharedDocsByTo` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocsByTo` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	/// The range of component `s` is `[1, 99]`.
	fn share_document(c: u32, _n: u32, _d: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (200 ±0) + s * (209 ±0)`
		//  Estimated: `13699`
		// Minimum execution time: 46_152_000 picoseconds.
		Weight::from_parts(18_993_375, 13699)
			// Standard Error: 461
			.saturating_add(Weight::from_parts(296_951, 0).saturating_mul(c.into()))
			// Standard Error: 461
			.saturating_add(Weight::from_parts(735_827, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `ConfidentialDocs::SharedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocs` (`max_values`: None, `max_size`: Some(351), added: 2826, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	fn update_shared_document_metadata(c: u32, n: u32, d: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `375 + c * (1 ±0) + d * (1 ±0) + n * (1 ±0)`
		//  Estimated: `3816`
		// Minimum execution time: 24_410_000 picoseconds.
		Weight::from_parts(24_738_782, 3816)
			// Standard Error: 509
			.saturating_add(Weight::from_parts(9_090, 0).saturating_mul(c.into()))
			// Standard Error: 1_058
			.saturating_add(Weight::from_parts(3_062, 0).saturating_mul(n.into()))
			// Standard Error: 526
			.saturating_add(Weight::from_parts(3_947, 0).saturating_mul(d.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ConfidentialDocs::SharedDocs` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocs` (`max_values`: None, `max_size`: Some(351), added: 2826, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::SharedDocsByTo` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocsByTo` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::SharedDocsByFrom` (r:1 w:1)
	/// Proof: `ConfidentialDocs::SharedDocsByFrom` (`max_values`: None, `max_size`: Some(10234), added: 12709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `d` is `[5, 100]`.
	/// The range of component `s` is `[1, 100]`.
	fn remove_shared_document(c: u32, n: u32, d: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (203 ±0) + d * (1 ±0) + n * (1 ±0) + s * (209 ±0)`
		//  Estimated: `13699`
		// Minimum execution time: 35_597_000 picoseconds.
		Weight::from_parts(7_503_363, 13699)
			// Standard Error: 631
			.saturating_add(Weight::from_parts(309_328, 0).saturating_mul(c.into()))
			// Standard Error: 1_312
			.saturating_add(Weight::from_parts(16_037, 0).saturating_mul(n.into()))
			// Standard Error: 653
			.saturating_add(Weight::from_parts(5_743, 0).saturating_mul(d.into()))
			// Standard Error: 631
			.saturating_add(Weight::from_parts(743_796, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `ConfidentialDocs::Groups` (r:1 w:1)
	/// Proof: `ConfidentialDocs::Groups` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::PublicKeys` (r:1 w:1)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::MemberGroups` (r:1 w:1)
	/// Proof: `ConfidentialDocs::MemberGroups` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::GroupMembers` (r:0 w:1)
	/// Proof: `ConfidentialDocs::GroupMembers` (`max_values`: None, `max_size`: Some(263), added: 2738, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	fn create_group(c: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304`
		//  Estimated: `6699`
		// Minimum execution time: 33_008_000 picoseconds.
		Weight::from_parts(33_993_180, 6699)
			// Standard Error: 434
			.saturating_add(Weight::from_parts(353, 0).saturating_mul(c.into()))
			// Standard Error: 902
			.saturating_add(Weight::from_parts(7_273, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `ConfidentialDocs::Groups` (r:1 w:0)
	/// Proof: `ConfidentialDocs::Groups` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::PublicKeys` (r:2 w:0)
	/// Proof: `ConfidentialDocs::PublicKeys` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::GroupMembers` (r:2 w:1)
	/// Proof: `ConfidentialDocs::GroupMembers` (`max_values`: None, `max_size`: Some(263), added: 2738, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::MemberGroups` (r:1 w:1)
	/// Proof: `ConfidentialDocs::MemberGroups` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `s` is `[1, 99]`.
	fn add_group_member(c: u32, n: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1077 + c * (1 ±0) + s * (18 ±0)`
		//  Estimated: `6699`
		// Minimum execution time: 46_452_000 picoseconds.
		Weight::from_parts(45_260_644, 6699)
			// Standard Error: 1_462
			.saturating_add(Weight::from_parts(71_997, 0).saturating_mul(c.into()))
			// Standard Error: 3_038
			.saturating_add(Weight::from_parts(5_531, 0).saturating_mul(n.into()))
			// Standard Error: 1_462
			.saturating_add(Weight::from_parts(228_161, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ConfidentialDocs::Groups` (r:1 w:0)
	/// Proof: `ConfidentialDocs::Groups` (`max_values`: None, `max_size`: Some(147), added: 2622, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::GroupMembers` (r:2 w:1)
	/// Proof: `ConfidentialDocs::GroupMembers` (`max_values`: None, `max_size`: Some(263), added: 2738, mode: `MaxEncodedLen`)
	/// Storage: `ConfidentialDocs::MemberGroups` (r:1 w:1)
	/// Proof: `ConfidentialDocs::MemberGroups` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 100]`.
	/// The range of component `n` is `[3, 50]`.
	/// The range of component `s` is `[1, 100]`.
	fn remove_group_member(c: u32, n: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1015 + c * (2 ±0) + s * (11 ±0)`
		//  Estimated: `6699`
		// Minimum execution time: 40_149_000 picoseconds.
		Weight::from_parts(34_798_204, 6699)
			// Standard Error: 1_693
			.saturating_add(Weight::from_parts(76_528, 0).saturating_mul(c.into()))
			// Standard Error: 3_517
			.saturating_add(Weight::from_parts(165_703, 0).saturating_mul(n.into()))
			// Standard Error: 1_692
			.saturating_add(Weight::from_parts(148_674, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
