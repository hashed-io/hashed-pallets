
//! Autogenerated weights for `pallet_bitcoin_vaults`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-17, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sebastian-XPS-13-9310`, CPU: `11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/hashed-parachain
// benchmark
// pallet
// --wasm-execution=compiled
// --chain
// dev
// --pallet
// pallet_bitcoin_vaults
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ../hashed-pallets/pallets/bitcoin-vaults/src/weights.rs
// --template
// /home/sebastian/vsc-workspace/polkadot-sdk/substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_bitcoin_vaults`.
pub trait WeightInfo {
	fn set_xpub(x: u32, ) -> Weight;
	fn remove_xpub(x: u32, d: u32, c: u32, v: u32, ) -> Weight;
	fn create_vault(x: u32, d: u32, c: u32, v: u32, ) -> Weight;
	fn remove_vault(x: u32, d: u32, c: u32, v: u32, p: u32, s: u32, ) -> Weight;
	fn propose(x: u32, d: u32, p: u32, s: u32, ) -> Weight;
	fn remove_proposal(x: u32, d: u32, p: u32, s: u32, ) -> Weight;
	fn set_bdk_url(u: u32, ) -> Weight;
	fn save_psbt(c: u32, s: u32, ) -> Weight;
	fn finalize_psbt(c: u32, s: u32, ) -> Weight;
	fn broadcast_psbt(s: u32, ) -> Weight;
	fn create_proof(d: u32, s: u32, ) -> Weight;
	fn save_proof_psbt(s: u32, ) -> Weight;
	fn finalize_proof(s: u32, ) -> Weight;
}

/// Weights for `pallet_bitcoin_vaults` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `BitcoinVaults::XpubsByOwner` (r:1 w:1)
	/// Proof: `BitcoinVaults::XpubsByOwner` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Xpubs` (r:1 w:1)
	/// Proof: `BitcoinVaults::Xpubs` (`max_values`: None, `max_size`: Some(200), added: 2675, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 166]`.
	fn set_xpub(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `3665`
		// Minimum execution time: 24_454_000 picoseconds.
		Weight::from_parts(27_800_005, 3665)
			// Standard Error: 5_603
			.saturating_add(Weight::from_parts(3_276, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BitcoinVaults::XpubsByOwner` (r:1 w:1)
	/// Proof: `BitcoinVaults::XpubsByOwner` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::VaultsBySigner` (r:1 w:0)
	/// Proof: `BitcoinVaults::VaultsBySigner` (`max_values`: None, `max_size`: Some(361), added: 2836, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Xpubs` (r:0 w:1)
	/// Proof: `BitcoinVaults::Xpubs` (`max_values`: None, `max_size`: Some(200), added: 2675, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `v` is `[0, 10]`.
	fn remove_xpub(_x: u32, _d: u32, c: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219`
		//  Estimated: `3826`
		// Minimum execution time: 25_228_000 picoseconds.
		Weight::from_parts(26_575_921, 3826)
			// Standard Error: 8_230
			.saturating_add(Weight::from_parts(10_524, 0).saturating_mul(c.into()))
			// Standard Error: 4_360
			.saturating_add(Weight::from_parts(19_054, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BitcoinVaults::XpubsByOwner` (r:7 w:0)
	/// Proof: `BitcoinVaults::XpubsByOwner` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::VaultsBySigner` (r:8 w:8)
	/// Proof: `BitcoinVaults::VaultsBySigner` (`max_values`: None, `max_size`: Some(361), added: 2836, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Vaults` (r:0 w:1)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `v` is `[0, 9]`.
	fn create_vault(_x: u32, _d: u32, c: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (324 ±0) + v * (232 ±0)`
		//  Estimated: `3826 + c * (2836 ±0)`
		// Minimum execution time: 50_503_000 picoseconds.
		Weight::from_parts(51_786_000, 3826)
			// Standard Error: 72_638
			.saturating_add(Weight::from_parts(9_594_664, 0).saturating_mul(c.into()))
			// Standard Error: 47_733
			.saturating_add(Weight::from_parts(1_485_743, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2836).saturating_mul(c.into()))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:1)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::VaultsBySigner` (r:8 w:8)
	/// Proof: `BitcoinVaults::VaultsBySigner` (`max_values`: None, `max_size`: Some(361), added: 2836, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProposalsByVault` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProposalsByVault` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Proposals` (r:100 w:100)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProofOfReserves` (r:0 w:1)
	/// Proof: `BitcoinVaults::ProofOfReserves` (`max_values`: None, `max_size`: Some(16861), added: 19336, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `p` is `[0, 100]`.
	/// The range of component `s` is `[2, 2048]`.
	fn remove_vault(_x: u32, _d: u32, c: u32, _v: u32, p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (208782 ±0) + d * (101 ±0) + p * (17148 ±0) + s * (800 ±0) + v * (184 ±0) + x * (114 ±0)`
		//  Estimated: `8264 + c * (2836 ±0) + p * (19986 ±0)`
		// Minimum execution time: 92_569_000 picoseconds.
		Weight::from_parts(96_027_000, 8264)
			// Standard Error: 1_991_590
			.saturating_add(Weight::from_parts(100_002_992, 0).saturating_mul(c.into()))
			// Standard Error: 118_852
			.saturating_add(Weight::from_parts(24_381_933, 0).saturating_mul(p.into()))
			// Standard Error: 5_834
			.saturating_add(Weight::from_parts(342_015, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 2836).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 19986).saturating_mul(p.into()))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProposalsByVault` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProposalsByVault` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `p` is `[0, 99]`.
	/// The range of component `s` is `[2, 2048]`.
	fn propose(x: u32, d: u32, p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `876 + d * (1 ±0) + p * (35 ±0) + x * (14 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 34_232_000 picoseconds.
		Weight::from_parts(18_039_167, 20976)
			// Standard Error: 3_979
			.saturating_add(Weight::from_parts(24_112, 0).saturating_mul(x.into()))
			// Standard Error: 3_282
			.saturating_add(Weight::from_parts(4_692, 0).saturating_mul(d.into()))
			// Standard Error: 6_595
			.saturating_add(Weight::from_parts(459_166, 0).saturating_mul(p.into()))
			// Standard Error: 319
			.saturating_add(Weight::from_parts(14_172, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProposalsByVault` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProposalsByVault` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `p` is `[1, 100]`.
	/// The range of component `s` is `[2, 2048]`.
	fn remove_proposal(x: u32, d: u32, p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `799 + d * (1 ±0) + p * (36 ±0) + s * (8 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 50_714_000 picoseconds.
		Weight::from_parts(14_391_606, 20976)
			// Standard Error: 4_049
			.saturating_add(Weight::from_parts(11_539, 0).saturating_mul(x.into()))
			// Standard Error: 3_339
			.saturating_add(Weight::from_parts(23_035, 0).saturating_mul(d.into()))
			// Standard Error: 6_711
			.saturating_add(Weight::from_parts(451_972, 0).saturating_mul(p.into()))
			// Standard Error: 325
			.saturating_add(Weight::from_parts(22_403, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `BitcoinVaults::BDKServicesURL` (r:0 w:1)
	/// Proof: `BitcoinVaults::BDKServicesURL` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[10, 32]`.
	fn set_bdk_url(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_388_000 picoseconds.
		Weight::from_parts(6_015_651, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `s` is `[2, 2048]`.
	fn save_psbt(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (2446 ±0) + s * (6 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 35_388_000 picoseconds.
		Weight::from_parts(5_697_489, 20976)
			// Standard Error: 37_763
			.saturating_add(Weight::from_parts(4_755_842, 0).saturating_mul(c.into()))
			// Standard Error: 102
			.saturating_add(Weight::from_parts(11_912, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `s` is `[2, 2048]`.
	fn finalize_psbt(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (2446 ±0) + s * (7 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 36_937_000 picoseconds.
		Weight::from_parts(10_938_266, 20976)
			// Standard Error: 49_331
			.saturating_add(Weight::from_parts(4_217_104, 0).saturating_mul(c.into()))
			// Standard Error: 133
			.saturating_add(Weight::from_parts(10_520, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 2048]`.
	fn broadcast_psbt(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3743 + s * (7 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 36_617_000 picoseconds.
		Weight::from_parts(39_211_452, 20976)
			// Standard Error: 210
			.saturating_add(Weight::from_parts(11_305, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProofOfReserves` (r:0 w:1)
	/// Proof: `BitcoinVaults::ProofOfReserves` (`max_values`: None, `max_size`: Some(16861), added: 19336, mode: `MaxEncodedLen`)
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `s` is `[2, 2048]`.
	fn create_proof(d: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2762 + d * (1 ±0)`
		//  Estimated: `8264`
		// Minimum execution time: 24_950_000 picoseconds.
		Weight::from_parts(26_464_799, 8264)
			// Standard Error: 1_057
			.saturating_add(Weight::from_parts(2_856, 0).saturating_mul(d.into()))
			// Standard Error: 103
			.saturating_add(Weight::from_parts(1_065, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProofOfReserves` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProofOfReserves` (`max_values`: None, `max_size`: Some(16861), added: 19336, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 2048]`.
	fn save_proof_psbt(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3429 + s * (7 ±0)`
		//  Estimated: `20326`
		// Minimum execution time: 34_973_000 picoseconds.
		Weight::from_parts(38_853_953, 20326)
			// Standard Error: 198
			.saturating_add(Weight::from_parts(9_498, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProofOfReserves` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProofOfReserves` (`max_values`: None, `max_size`: Some(16861), added: 19336, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 2048]`.
	fn finalize_proof(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3429 + s * (7 ±0)`
		//  Estimated: `20326`
		// Minimum execution time: 31_354_000 picoseconds.
		Weight::from_parts(33_454_675, 20326)
			// Standard Error: 142
			.saturating_add(Weight::from_parts(9_421, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `BitcoinVaults::XpubsByOwner` (r:1 w:1)
	/// Proof: `BitcoinVaults::XpubsByOwner` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Xpubs` (r:1 w:1)
	/// Proof: `BitcoinVaults::Xpubs` (`max_values`: None, `max_size`: Some(200), added: 2675, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[1, 166]`.
	fn set_xpub(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `80`
		//  Estimated: `3665`
		// Minimum execution time: 24_454_000 picoseconds.
		Weight::from_parts(27_800_005, 3665)
			// Standard Error: 5_603
			.saturating_add(Weight::from_parts(3_276, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BitcoinVaults::XpubsByOwner` (r:1 w:1)
	/// Proof: `BitcoinVaults::XpubsByOwner` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::VaultsBySigner` (r:1 w:0)
	/// Proof: `BitcoinVaults::VaultsBySigner` (`max_values`: None, `max_size`: Some(361), added: 2836, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Xpubs` (r:0 w:1)
	/// Proof: `BitcoinVaults::Xpubs` (`max_values`: None, `max_size`: Some(200), added: 2675, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `v` is `[0, 10]`.
	fn remove_xpub(_x: u32, _d: u32, c: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219`
		//  Estimated: `3826`
		// Minimum execution time: 25_228_000 picoseconds.
		Weight::from_parts(26_575_921, 3826)
			// Standard Error: 8_230
			.saturating_add(Weight::from_parts(10_524, 0).saturating_mul(c.into()))
			// Standard Error: 4_360
			.saturating_add(Weight::from_parts(19_054, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BitcoinVaults::XpubsByOwner` (r:7 w:0)
	/// Proof: `BitcoinVaults::XpubsByOwner` (`max_values`: None, `max_size`: Some(64), added: 2539, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::VaultsBySigner` (r:8 w:8)
	/// Proof: `BitcoinVaults::VaultsBySigner` (`max_values`: None, `max_size`: Some(361), added: 2836, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Vaults` (r:0 w:1)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `v` is `[0, 9]`.
	fn create_vault(_x: u32, _d: u32, c: u32, v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (324 ±0) + v * (232 ±0)`
		//  Estimated: `3826 + c * (2836 ±0)`
		// Minimum execution time: 50_503_000 picoseconds.
		Weight::from_parts(51_786_000, 3826)
			// Standard Error: 72_638
			.saturating_add(Weight::from_parts(9_594_664, 0).saturating_mul(c.into()))
			// Standard Error: 47_733
			.saturating_add(Weight::from_parts(1_485_743, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2836).saturating_mul(c.into()))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:1)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::VaultsBySigner` (r:8 w:8)
	/// Proof: `BitcoinVaults::VaultsBySigner` (`max_values`: None, `max_size`: Some(361), added: 2836, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProposalsByVault` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProposalsByVault` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Proposals` (r:100 w:100)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProofOfReserves` (r:0 w:1)
	/// Proof: `BitcoinVaults::ProofOfReserves` (`max_values`: None, `max_size`: Some(16861), added: 19336, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `v` is `[1, 10]`.
	/// The range of component `p` is `[0, 100]`.
	/// The range of component `s` is `[2, 2048]`.
	fn remove_vault(_x: u32, _d: u32, c: u32, _v: u32, p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (208782 ±0) + d * (101 ±0) + p * (17148 ±0) + s * (800 ±0) + v * (184 ±0) + x * (114 ±0)`
		//  Estimated: `8264 + c * (2836 ±0) + p * (19986 ±0)`
		// Minimum execution time: 92_569_000 picoseconds.
		Weight::from_parts(96_027_000, 8264)
			// Standard Error: 1_991_590
			.saturating_add(Weight::from_parts(100_002_992, 0).saturating_mul(c.into()))
			// Standard Error: 118_852
			.saturating_add(Weight::from_parts(24_381_933, 0).saturating_mul(p.into()))
			// Standard Error: 5_834
			.saturating_add(Weight::from_parts(342_015, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_parts(0, 2836).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 19986).saturating_mul(p.into()))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProposalsByVault` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProposalsByVault` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `p` is `[0, 99]`.
	/// The range of component `s` is `[2, 2048]`.
	fn propose(x: u32, d: u32, p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `876 + d * (1 ±0) + p * (35 ±0) + x * (14 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 34_232_000 picoseconds.
		Weight::from_parts(18_039_167, 20976)
			// Standard Error: 3_979
			.saturating_add(Weight::from_parts(24_112, 0).saturating_mul(x.into()))
			// Standard Error: 3_282
			.saturating_add(Weight::from_parts(4_692, 0).saturating_mul(d.into()))
			// Standard Error: 6_595
			.saturating_add(Weight::from_parts(459_166, 0).saturating_mul(p.into()))
			// Standard Error: 319
			.saturating_add(Weight::from_parts(14_172, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProposalsByVault` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProposalsByVault` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// The range of component `x` is `[2, 166]`.
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `p` is `[1, 100]`.
	/// The range of component `s` is `[2, 2048]`.
	fn remove_proposal(x: u32, d: u32, p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `799 + d * (1 ±0) + p * (36 ±0) + s * (8 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 50_714_000 picoseconds.
		Weight::from_parts(14_391_606, 20976)
			// Standard Error: 4_049
			.saturating_add(Weight::from_parts(11_539, 0).saturating_mul(x.into()))
			// Standard Error: 3_339
			.saturating_add(Weight::from_parts(23_035, 0).saturating_mul(d.into()))
			// Standard Error: 6_711
			.saturating_add(Weight::from_parts(451_972, 0).saturating_mul(p.into()))
			// Standard Error: 325
			.saturating_add(Weight::from_parts(22_403, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `BitcoinVaults::BDKServicesURL` (r:0 w:1)
	/// Proof: `BitcoinVaults::BDKServicesURL` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
	/// The range of component `u` is `[10, 32]`.
	fn set_bdk_url(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_388_000 picoseconds.
		Weight::from_parts(6_015_651, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `s` is `[2, 2048]`.
	fn save_psbt(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (2446 ±0) + s * (6 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 35_388_000 picoseconds.
		Weight::from_parts(5_697_489, 20976)
			// Standard Error: 37_763
			.saturating_add(Weight::from_parts(4_755_842, 0).saturating_mul(c.into()))
			// Standard Error: 102
			.saturating_add(Weight::from_parts(11_912, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[2, 7]`.
	/// The range of component `s` is `[2, 2048]`.
	fn finalize_psbt(c: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + c * (2446 ±0) + s * (7 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 36_937_000 picoseconds.
		Weight::from_parts(10_938_266, 20976)
			// Standard Error: 49_331
			.saturating_add(Weight::from_parts(4_217_104, 0).saturating_mul(c.into()))
			// Standard Error: 133
			.saturating_add(Weight::from_parts(10_520, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Proposals` (r:1 w:1)
	/// Proof: `BitcoinVaults::Proposals` (`max_values`: None, `max_size`: Some(17511), added: 19986, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 2048]`.
	fn broadcast_psbt(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3743 + s * (7 ±0)`
		//  Estimated: `20976`
		// Minimum execution time: 36_617_000 picoseconds.
		Weight::from_parts(39_211_452, 20976)
			// Standard Error: 210
			.saturating_add(Weight::from_parts(11_305, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProofOfReserves` (r:0 w:1)
	/// Proof: `BitcoinVaults::ProofOfReserves` (`max_values`: None, `max_size`: Some(16861), added: 19336, mode: `MaxEncodedLen`)
	/// The range of component `d` is `[1, 200]`.
	/// The range of component `s` is `[2, 2048]`.
	fn create_proof(d: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2762 + d * (1 ±0)`
		//  Estimated: `8264`
		// Minimum execution time: 24_950_000 picoseconds.
		Weight::from_parts(26_464_799, 8264)
			// Standard Error: 1_057
			.saturating_add(Weight::from_parts(2_856, 0).saturating_mul(d.into()))
			// Standard Error: 103
			.saturating_add(Weight::from_parts(1_065, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProofOfReserves` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProofOfReserves` (`max_values`: None, `max_size`: Some(16861), added: 19336, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 2048]`.
	fn save_proof_psbt(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3429 + s * (7 ±0)`
		//  Estimated: `20326`
		// Minimum execution time: 34_973_000 picoseconds.
		Weight::from_parts(38_853_953, 20326)
			// Standard Error: 198
			.saturating_add(Weight::from_parts(9_498, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `BitcoinVaults::Vaults` (r:1 w:0)
	/// Proof: `BitcoinVaults::Vaults` (`max_values`: None, `max_size`: Some(4799), added: 7274, mode: `MaxEncodedLen`)
	/// Storage: `BitcoinVaults::ProofOfReserves` (r:1 w:1)
	/// Proof: `BitcoinVaults::ProofOfReserves` (`max_values`: None, `max_size`: Some(16861), added: 19336, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[2, 2048]`.
	fn finalize_proof(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3429 + s * (7 ±0)`
		//  Estimated: `20326`
		// Minimum execution time: 31_354_000 picoseconds.
		Weight::from_parts(33_454_675, 20326)
			// Standard Error: 142
			.saturating_add(Weight::from_parts(9_421, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
