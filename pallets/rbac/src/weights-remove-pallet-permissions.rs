
//! Autogenerated weights for `pallet_rbac`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-02-19, STEPS: `10`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `sebastian-XPS-13-9310`, CPU: `11th Gen Intel(R) Core(TM) i7-1185G7 @ 3.00GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/hashed-parachain
// benchmark
// pallet
// --wasm-execution=compiled
// --chain
// dev
// --pallet
// pallet_rbac
// --extrinsic
// remove_pallet_permissions
// --steps
// 10
// --repeat
// 5
// --output
// ../hashed-pallets/pallets/rbac/src/weights.rs
// --template
// /home/sebastian/vsc-workspace/polkadot-sdk/substrate/.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_rbac`.
pub trait WeightInfo {
	fn remove_pallet_permissions(i: u32, s: u32, u: u32, ) -> Weight;
}

/// Weights for `pallet_rbac` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `RBAC::Scopes` (r:1 w:1)
	/// Proof: `RBAC::Scopes` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::UsersByScope` (r:1100 w:1000)
	/// Proof: `RBAC::UsersByScope` (`max_values`: None, `max_size`: Some(16098), added: 18573, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::PalletRoles` (r:2 w:1)
	/// Proof: `RBAC::PalletRoles` (`max_values`: None, `max_size`: Some(1633), added: 4108, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::PermissionsByRole` (r:50 w:50)
	/// Proof: `RBAC::PermissionsByRole` (`max_values`: None, `max_size`: Some(3266), added: 5741, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::Permissions` (r:100 w:100)
	/// Proof: `RBAC::Permissions` (`max_values`: None, `max_size`: Some(115), added: 2590, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::Roles` (r:0 w:50)
	/// Proof: `RBAC::Roles` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::RolesByUser` (r:0 w:50000)
	/// Proof: `RBAC::RolesByUser` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `s` is `[1, 100]`.
	/// The range of component `u` is `[1, 500]`.
	fn remove_pallet_permissions(_i: u32, s: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + s * (160490 ±0) + u * (32000 ±0)`
		//  Estimated: `288040 + s * (204303 ±0)`
		// Minimum execution time: 4_292_658_000 picoseconds.
		Weight::from_parts(4_366_435_000, 288040)
			// Standard Error: 221_159_668
			.saturating_add(Weight::from_parts(3_973_731_500, 0).saturating_mul(s.into()))
			// Standard Error: 44_058_618
			.saturating_add(Weight::from_parts(767_998_348, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(153_u64))
			.saturating_add(T::DbWeight::get().reads((11_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(712_u64))
			.saturating_add(T::DbWeight::get().writes((311_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes((61_u64).saturating_mul(u.into())))
			.saturating_add(Weight::from_parts(0, 204303).saturating_mul(s.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `RBAC::Scopes` (r:1 w:1)
	/// Proof: `RBAC::Scopes` (`max_values`: None, `max_size`: Some(3234), added: 5709, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::UsersByScope` (r:1100 w:1000)
	/// Proof: `RBAC::UsersByScope` (`max_values`: None, `max_size`: Some(16098), added: 18573, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::PalletRoles` (r:2 w:1)
	/// Proof: `RBAC::PalletRoles` (`max_values`: None, `max_size`: Some(1633), added: 4108, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::PermissionsByRole` (r:50 w:50)
	/// Proof: `RBAC::PermissionsByRole` (`max_values`: None, `max_size`: Some(3266), added: 5741, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::Permissions` (r:100 w:100)
	/// Proof: `RBAC::Permissions` (`max_values`: None, `max_size`: Some(115), added: 2590, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::Roles` (r:0 w:50)
	/// Proof: `RBAC::Roles` (`max_values`: None, `max_size`: Some(83), added: 2558, mode: `MaxEncodedLen`)
	/// Storage: `RBAC::RolesByUser` (r:0 w:50000)
	/// Proof: `RBAC::RolesByUser` (`max_values`: None, `max_size`: Some(433), added: 2908, mode: `MaxEncodedLen`)
	/// The range of component `i` is `[1, 100]`.
	/// The range of component `s` is `[1, 100]`.
	/// The range of component `u` is `[1, 500]`.
	fn remove_pallet_permissions(_i: u32, s: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + s * (160490 ±0) + u * (32000 ±0)`
		//  Estimated: `288040 + s * (204303 ±0)`
		// Minimum execution time: 4_292_658_000 picoseconds.
		Weight::from_parts(4_366_435_000, 288040)
			// Standard Error: 221_159_668
			.saturating_add(Weight::from_parts(3_973_731_500, 0).saturating_mul(s.into()))
			// Standard Error: 44_058_618
			.saturating_add(Weight::from_parts(767_998_348, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(153_u64))
			.saturating_add(RocksDbWeight::get().reads((11_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(712_u64))
			.saturating_add(RocksDbWeight::get().writes((311_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes((61_u64).saturating_mul(u.into())))
			.saturating_add(Weight::from_parts(0, 204303).saturating_mul(s.into()))
	}
}
